/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useControls } from "leva";
import * as THREE from "three";

export function Majake(props) {

  const { animation, wireframe } = props // destructure the animation

  const { headFollow, cursorFollow, 
    // wireframe we took this out but why?
   } = useControls({
    headFollow: false,
    cursorFollow: false, // by default -> will be false
    wireframe: false,
  })
  const group = useRef();
  const { nodes, materials } = useGLTF("models/fashionista.glb");

  const { animations: typingAnimation } = useFBX("animations/Typing.fbx");
  const { animations: fallingAnimation } = useFBX("animations/Falling_Idle.fbx");
  const { animations: standingAnimation } = useFBX("animations/Standing_Idle.fbx");

  // RENAME THE ANIMATIONS -> note it is only the name that's being renamed
  fallingAnimation[0].name = "MajakeFalling"
  standingAnimation[0].name = "MajakeStanding"
  typingAnimation[0].name = "MajakeTyping"
  // console.log(typingAnimation)
  // once we have animations we need to create actions to be able to play
  // takes an array of animation clips -> 1st params
  // 2nd params -> the group on which it will perform the animation
  // const { actions } = useAnimations(typingAnimation, group);
  const { actions } = useAnimations(
    [ fallingAnimation[0], standingAnimation[0], typingAnimation[0]],
     group);

    //  console.log(useAnimations)


  // let's make it follow our camera
  
    useFrame((state) => {
      if (headFollow) {
      group.current.getObjectByName("Head").lookAt(state.camera.position);
      }

      if (cursorFollow) { // we can get the mouse position from useFrame state
        // add 1 to make it at the front of the character, so it looks at us
        const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1)
        group.current.getObjectByName("Spine2").lookAt(target)
      }
    })

  // play the actions with useEffect
  useEffect(() => {
    // actions["MajakeFalling"].reset().play(); // playing animation manually
    actions[animation].reset().fadeIn(.5).play();

    // return a function to cancel the previous animation
    return () => {
      // actions["MajakeStanding"].reset().fadeOut(.5) // stop previous animation
      // console.log(actions[animation])
      actions[animation].reset().fadeOut(.5) // stop previous animation
    }
  }, [animation]) // call useEffect when animation changes

  useEffect(() => {
    Object.values(materials).forEach((material) => {
      material.wireframe = wireframe
    })
  }, [wireframe]) // if wireFrame change -> we will apply the wireFrame effect on our materials

  return (
    <group {...props} ref={group} dispose={null}>
      {/* to fix the rotation -> we did this (right below) */}
      <group rotation-x={-Math.PI / 2}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        frustumCulled={false}
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        frustumCulled={false}
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        frustumCulled={false}
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        frustumCulled={false}
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      <skinnedMesh
        frustumCulled={false}
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Top"
        frustumCulled={false}
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Outfit_Top.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Outfit_Top.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Bottom"
        frustumCulled={false}
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Outfit_Bottom.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Outfit_Bottom.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Footwear"
        frustumCulled={false}
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        morphTargetDictionary={
          nodes.Wolf3D_Outfit_Footwear.morphTargetDictionary
        }
        morphTargetInfluences={
          nodes.Wolf3D_Outfit_Footwear.morphTargetInfluences
        }
      />
      <skinnedMesh
        name="Wolf3D_Body"
        frustumCulled={false}
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Body.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Body.morphTargetInfluences}
      />
    </group>
    </group>
  );
}

useGLTF.preload("models/fashionista.glb");
useFBX.preload("animations/Typing.fbx");
useFBX.preload("animations/Falling_Idle.fbx");
useFBX.preload("animations/Standing_Idle.fbx");